##Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
##------------------------------------------------------------------------

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param root: The root of binary tree.
    @return: True if this Binary tree is Balanced, or false.
    """
    def isBalanced(self, root):
        # write your code here
        if root is None:
            return True
        l1 = self.maxh(root.left)
        r1 = self.maxh(root.right)
        if (l1 is False) or (r1 is False) or (abs(l1 - r1) > 1):
            return False
        else:
            return True

    def maxh(self, root):
        if root is None:
            return 0
        else:
            l = self.maxh(root.left)
            r = self.maxh(root.right)
            if (l is False) or (r is False) or (abs(l - r) > 1):
                return False
            else: return 1+max(l,r)
            
##---------------------------------
##Total Runtime: 906 ms
